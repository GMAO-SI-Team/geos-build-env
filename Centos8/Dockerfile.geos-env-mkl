# ESMA Baselibs and its dependencies (compiler, mpi)

ARG baselibversion
ARG osversion
ARG compilerversion
ARG compilername
ARG mpiversion
ARG mpiname
ARG intelversion
ARG GEOS_ENV_IMAGE=gmao/${osversion}-geos-env:${baselibversion}-${mpiname}_${mpiversion}-${compilername}_${compilerversion}
FROM ${GEOS_ENV_IMAGE}

ARG baselibversion
ARG compilerversion
ARG compilername
ARG mpiversion
ARG mpiname
ARG intelversion

COPY Centos8/oneAPI.repo /etc/yum.repos.d

# MKL version oneAPI
#
# https://software.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/yum-dnf-zypper.html
#
# Based partly on https://gist.github.com/mgoldey/f3886b7accc0cd730e37528e09f7bc81
#
# https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
#
RUN dnf -y install intel-oneapi-mkl && \
    (find /opt/intel/oneapi -name "ia32*" -exec rm -rf {} \; || echo "removing ia32 binaries") ; \
    (find /opt/intel/oneapi -name "examples" -type d -exec rm -rf {} \; || echo "removing examples") ; \
    (find /opt/intel/oneapi -name "benchmarks" -exec rm -rf {} \; || echo "removing benchmarks") ; \
    (find /opt/intel/oneapi -name "documentation*" -exec rm -rf {} \; || echo "removing documentation") ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/interfaces ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*.a ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*mpi*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*tbb*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*pgi*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*mc*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*blacs*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*scalapack*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*gf*.so ) ; \
    (rm -rf /opt/intel/oneapi/mkl/latest/lib/intel64/*mic*.so ) ; \
    dnf clean all

ENV MKLROOT /opt/intel/oneapi/mkl/latest

# Build command
# > docker build --build-arg baselibversion=x.y.z --build-arg compilerversion=<compilerversion> --build-arg mpiversion=<mpiversion> --build-arg osversion=<osversion> -f Dockerfile.geos-env-mkl -t gmao/<osversion>-geos-env-mkl:<baselibversion>-<mpiname>_<mpiversion>-<compilername>_<compilerversion> .
#
#   where (for example):
#     <baselibversion> is "6.0.16"
#     <osversion> is "opensuse15" or "ubuntu20"
#     <compilerversion> is "10.2.0"
#     <mpiversion> is "4.0.5"
